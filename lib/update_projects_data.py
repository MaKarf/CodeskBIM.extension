""" update json data"""
import json

from Autodesk.Revit import DB
from Autodesk.Revit.DB import BuiltInParameter, FilteredElementCollector as Fec, BuiltInCategory as Bic

from files_path import files_path

ui_doc = __revit__.ActiveUIDocument
doc = ui_doc.Document
active_view = ui_doc.ActiveView


class ProjectData:
    # print("INSIDE THE PROJECT DATA CLASS\n")
    # print("****************************************\n" * 2)
    revit_file_name = ""
    path = files_path.projects_document_data_file_path
    rollback_data = None

    existing_projects = {}
    active_project_data_dict = {}

    current_options = []
    current_options_checker_list = []

    def __init__(self, revit_file_name):
        self.revit_file_name = revit_file_name.replace('\xa0', ' ')
        self.update_current_options()

    def update_current_options(self):
        self.load_json_file()
        """ replace unknown space characters with a valid space character in the file name
        invalid characters are occurred when the revit name is copied and pasted from somewhere"""

        """ set search scope to only the active revit document"""
        if self.revit_file_name in self.existing_projects:
            self.active_project_data_dict.update(self.existing_projects[self.revit_file_name])
            # print("ACTIVE: ", self.active_project_data_dict)
        else:
            # print("document name: [{}] not found in Project Info database".format(revit_file_name))
            # print("Created doc data with [{}]".format(revit_file_name))

            self.add_project()
            self.active_project_data_dict.update(self.existing_projects[self.revit_file_name])

        self.current_options = self.active_project_data_dict["grids_selection_options"]
        self.current_options_checker_list = [name.lower() for name in self.current_options]

        return self.current_options

    def create_new_json(self):
        """create new if no json file exist"""
        with open(self.path, 'w') as json_new:
            json.dump({"documents": {}}, json_new, indent=4)
            json_new.close()

        # """open json file after creating one"""
        # with open(self.path, 'r') as file:
        #     json_data = json.load(file)
        #     self.existing_projects.update(json_data["documents"])
        #     # print("\nOriginal Data: {}".format(json_data))

    def load_json_file(self):
        """open json file"""
        try:

            with open(self.path, 'r') as file:

                """handle exception on the presence of the main json variable """
                try:
                    json_data = json.load(file)
                except ValueError:
                    """reopen json file after creating it"""
                    self.create_new_json()
                    # print("")
                    json_data = json.load(file)

                self.existing_projects.update(json_data["documents"])
                file.close()

        except IOError:
            """reopen json file after creating it"""
            self.create_new_json()
            with open(self.path, 'r') as file:
                json_data = json.load(file)
                self.existing_projects.update(json_data["documents"])
                file.close()
        # self.rollback_data = self.existing_projects
        # print("Existing Projects Data: ", self.rollback_data)

    @staticmethod
    def create_a_sheet():
        # try:
        ttb_id = Fec(doc).OfCategory(Bic.OST_TitleBlocks).WhereElementIsElementType().FirstElement().GetTypeId()
        # print(ttb_id)

        sheet = DB.ViewSheet.Create(doc, ttb_id)

        return sheet

    def add_project(self):
        """extract parameters from revit database"""
        sheets = Fec(doc).OfCategory(Bic.OST_Sheets).WhereElementIsNotElementType().FirstElement()
        t = DB.Transaction(doc, "Add project info")
        t.Start()
        if sheets is None:
            """No sheets in list so create a temporary sheet, extract necessary information and delete it afterwards"""
            sheet_element = self.create_a_sheet()

            # Alert(title="No Sheet Found",
            #       header="Please create at least a sheets and retry",
            #       content="")
            # sys.exit()
        else:
            sheet_element = sheets
        """ setting Built-In_parameters using the get_Parameter method"""
        project_info = doc.ProjectInformation

        # location = project_info.get_Parameter(BuiltInParameter.PROJECT_ADDRESS)
        # project_title = "PROPOSED {0} TO BE BUILT {1}AT {2}".format(project_name, area, location).upper()

        """extract the project name from the project title generated by codesk"""
        project_title = project_info.get_Parameter(BuiltInParameter.PROJECT_NAME).AsString()
        start_of_name = len("PROPOSED") + 1

        # try:
        #     end_of_name = project_title.index("TO BE BUILT") - 1
        #     project_name = project_title[start_of_name:end_of_name]
        # except ValueError:
        #
        #     project_name = "RESIDENCE"

        client_name = project_info.get_Parameter(BuiltInParameter.CLIENT_NAME).AsString()
        date = project_info.get_Parameter(BuiltInParameter.PROJECT_ISSUE_DATE).AsString()

        designed_by = sheet_element.get_Parameter(BuiltInParameter.SHEET_DESIGNED_BY).AsString()
        drawn_by = sheet_element.get_Parameter(BuiltInParameter.SHEET_DRAWN_BY).AsString()
        checked_by = sheet_element.get_Parameter(BuiltInParameter.SHEET_CHECKED_BY).AsString()

        """===================================================================================================="""
        """parameters for the shared parameters of the site plan"""
        """initiate the parameters"""
        project_name = ""
        locality = ""
        district = ""
        region = ""
        plot = ""
        street = ""
        try:
            project_name = sheet_element.LookupParameter("Project Name").AsString()
            locality = sheet_element.LookupParameter("Locality").AsString()
            district = sheet_element.LookupParameter("District_Municipality_Metropolis").AsString()
            region = sheet_element.LookupParameter("Region").AsString()
            plot = sheet_element.LookupParameter("Plot Number").AsString()
            street = sheet_element.LookupParameter("Street Name").AsString()

        except AttributeError:
            """parameter not found"""
            pass
        """===================================================================================================="""

        """open template json file"""
        new_project = {
            self.revit_file_name:
                {
                    "doc_title": self.revit_file_name,

                    "project_info":
                        {
                            "checked_by": checked_by,
                            "street": street,
                            "district": district,
                            "designed_by": designed_by,
                            "region": region,
                            "locality": locality,
                            "plot": plot,
                            "client_name": client_name,
                            "drawn_by": drawn_by,
                            "project_name": project_name,
                            "date": date
                        },

                    "grids_selection_options": {}
                }
        }
        self.existing_projects.update(new_project)
        updated_projects = {"documents": self.existing_projects}
        try:
            """ Save the updated data back to the JSON file"""
            with open(self.path, 'w') as json_update:
                json.dump(updated_projects, json_update, indent=4)
                """ print results"""
                json_update.close()
        except Exception as e:
            # print("Save updated Error: ", e)
            # self.rollback_changes()
            pass

        """delete sheet after extracting the necessary information"""
        doc.Delete(sheet_element.Id)

        t.Commit()

    # def update_project_info(self):
    #     project_info = self.active_project_data_dict["project_info"]
    def delete_grid_option(self, option_name):
        current_options = self.active_project_data_dict["grids_selection_options"]
        if option_name in current_options:
            # print option_name
            """update json file with new option"""
            self.existing_projects[self.revit_file_name]["grids_selection_options"].pop(option_name)
            with open(self.path, "w") as f:
                json.dump({"documents": self.existing_projects}, f, indent=4)
                f.close()
            return self.update_current_options()
        else:
            # print "option_name NOT in current_options"
            return None

    def save_grid_selection(self, option_name, merged_vertical_and_horizontal_grids):

        main = []
        sub = []
        [(main.append(int(grid_data["elem"].Id.IntegerValue)) if grid_data["sub"] is False else
          sub.append(int(grid_data["elem"].Id.IntegerValue))) for grid_data in merged_vertical_and_horizontal_grids]

        options_dict = {}
        options_dict.update(self.current_options)

        new_option = {
            option_name: {
                "main_grids": main,
                "sub_grids": sub
            }
        }

        options_dict.update(new_option)
        """update json file with new option"""
        self.existing_projects[self.revit_file_name]["grids_selection_options"] = options_dict
        with open(self.path, "w") as f:
            json.dump({"documents": self.existing_projects}, f, indent=4)

        """read the json file to get the updated properties"""
        self.update_current_options()

    def rollback_changes(self):
        """create new if no json file exist"""
        rollback_data = {"documents": self.existing_projects}
        # print("inside the rollback changed method")
        # print(rollback_data)

        with open(self.path, 'w') as json_new:
            json.dump(rollback_data, json_new, indent=4)
            json_new.close()
            # print("rolled back")

    # return Fec(doc).OfCategory(Bic.OST_Sheets).WhereElementIsNotElementType().FirstElement()

    # except AttributeError:
    #     Alert("Some sheets number are already used in existing sheets",
    #           header="Same sheet number detected",
    #           title="Sheet Number Error", exit=True)
    #     sys.exit()

    # """create the title block element and place it on the sheet"""
    # title_block = doc.Create.NewFamilyInstance(DB.XYZ(0, 0, 0), selected_title_block, new_sheet)
    #
    # new_sheet.Name = sheet_dicts.get("sheet_name")
    # sheet_name = new_sheet.Name.upper()
    # new_sheet.SheetNumber = sheet_dicts.get("sheet_number")


if __name__ == "__main__":
    project_data_class = ProjectData("Project 2024")
    active_project_data_dict = project_data_class.active_project_data_dict
    project_data_path = project_data_class.path
